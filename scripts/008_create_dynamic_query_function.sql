-- Create a secure function to execute dynamic SQL queries
-- This function provides a safe way to execute SELECT queries generated by AI

CREATE OR REPLACE FUNCTION execute_dynamic_query(query_text TEXT)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  result_data JSONB;
  query_result RECORD;
  result_array JSONB[] := ARRAY[]::JSONB[];
BEGIN
  -- Validate that the query is a SELECT statement
  IF NOT (query_text ~* '^(\s)*(WITH|SELECT)') THEN
    RAISE EXCEPTION 'Only SELECT queries are allowed';
  END IF;

  -- Validate that the query doesn't contain dangerous operations
  IF query_text ~* '(INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|TRUNCATE|EXECUTE)' THEN
    RAISE EXCEPTION 'Query contains unsupported operations';
  END IF;

  -- Execute the query and collect results
  FOR query_result IN EXECUTE query_text LOOP
    result_array := result_array || to_jsonb(query_result);
  END LOOP;

  -- Convert array to JSONB
  result_data := to_jsonb(result_array);

  RETURN result_data;
EXCEPTION
  WHEN OTHERS THEN
    -- Log the error for debugging
    RAISE NOTICE 'Dynamic query execution failed: %', SQLERRM;
    RAISE EXCEPTION 'Query execution failed: %', SQLERRM;
END;
$$;

-- Grant execute permission to authenticated users
GRANT EXECUTE ON FUNCTION execute_dynamic_query(TEXT) TO authenticated;

-- Create a policy to ensure only authenticated users can execute this function
-- Note: Since this is a SECURITY DEFINER function, RLS policies apply to the function caller

-- Add comment for documentation
COMMENT ON FUNCTION execute_dynamic_query(TEXT) IS 'Securely executes dynamic SELECT queries generated by AI, with validation and safety checks';
